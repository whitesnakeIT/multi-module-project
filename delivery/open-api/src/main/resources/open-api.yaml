openapi: 3.0.11
info:
  title: API for Delivery Application
  description: This API provides functionality for managing customers, couriers, orders, tracking and deliveries
  version: 1.0.0
servers:
  - url: http://localhost:8080/api/v1
paths:
  /customers:
    get:
      parameters:
        - name: page
          in: query
          description: Number of page
          required: false
          schema:
            type: integer
            format: int32
      summary: Get all customers
      operationId: getAllCustomers
      responses:
        "200":
          description: List of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
    post:
      summary: Create a new customer
      operationId: createCustomer
      requestBody:
        description: Customer object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        "201":
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
  /customers/{uuid}:
    get:
      summary: Get a customer by UUID
      operationId: getCustomer
      parameters:
        - name: uuid
          in: path
          description: UUID of customer to get
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Customer found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        "404":
          description: Customer not found
    put:
      summary: Update a customer
      operationId: updateCustomer
      parameters:
        - name: uuid
          in: path
          description: UUID of customer to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Customer object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        "200":
          description: Customer updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        "404":
          description: Customer not found
    delete:
      summary: Delete a customer
      operationId: deleteCustomer
      parameters:
        - name: uuid
          in: path
          description: UUID of customer to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Customer deleted successfully
        "404":
          description: Customer not found
  /couriers:
    get:
      parameters:
        - name: page
          in: query
          description: Number of page
          required: false
          schema:
            type: integer
      summary: Get all couriers
      operationId: getAllCouriers
      responses:
        "200":
          description: List of all couriers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Courier'
    post:
      summary: Create a new courier
      operationId: createCourier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Courier'
      responses:
        "201":
          description: Courier created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Courier'
  /couriers/{uuid}:
    get:
      summary: Get a courier by UUID
      operationId: getCourier
      parameters:
        - name: uuid
          in: path
          description: Courier UUID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Courier'
    put:
      summary: Update a courier
      operationId: updateCourier
      parameters:
        - name: uuid
          in: path
          description: Courier UUID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Courier'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Courier'
    delete:
      summary: Delete a courier
      operationId: deleteCourier
      parameters:
        - name: uuid
          in: path
          description: Courier UUID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content
  /deliveries:
    get:
      parameters:
        - name: page
          in: query
          description: Number of page
          required: false
          schema:
            type: integer
            format: int32
      summary: Get all deliveries
      operationId: getAllDeliveries
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Delivery'
    post:
      summary: Create a new delivery
      operationId: createDelivery
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Delivery'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delivery'
  /deliveries/{uuid}:
    get:
      summary: Get a delivery by UUID
      operationId: getDelivery
      parameters:
        - in: path
          name: uuid
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the delivery to get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delivery'
        '404':
          description: Not Found
    put:
      summary: Update a delivery by UUID
      operationId: updateDelivery
      parameters:
        - in: path
          name: uuid
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the delivery to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Delivery'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delivery'
        '404':
          description: Not Found
    delete:
      summary: Delete a delivery by UUID
      operationId: deleteDelivery
      parameters:
        - in: path
          name: uuid
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the delivery to delete
      responses:
        '204':
          description: No Content
  /orders:
    get:
      parameters:
        - name: page
          in: query
          description: Number of page
          required: false
          schema:
            type: integer
            format: int32
      summary: Get all orders
      operationId: getAllOrders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    post:
      summary: Create a new order
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
  /orders/{uuid}:
    get:
      summary: Get an order by UUID
      operationId: getOrder
      parameters:
        - in: path
          name: uuid
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the order to get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Not Found
    put:
      summary: Update an order by UUID
      operationId: updateOrder
      parameters:
        - in: path
          name: uuid
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the order to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Not Found
    delete:
      summary: Delete an order by UUID
      operationId: deleteOrder
      parameters:
        - in: path
          name: uuid
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the order to delete
      responses:
        '204':
          description: No Content
  /tracking:
    get:
      parameters:
        - name: page
          in: query
          description: Number of page
          required: false
          schema:
            type: integer
            format: int32
      summary: Get all tracking
      operationId: getAllTracking
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tracking'
    post:
      summary: Create a new tracking
      operationId: createTracking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tracking'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tracking'
  /tracking/{uuid}:
    get:
      summary: Get tracking by UUID
      operationId: getTracking
      parameters:
        - in: path
          name: uuid
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the tracking to get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tracking'
        '404':
          description: Not Found
    put:
      summary: Update tracking by UUID
      operationId: updateTracking
      parameters:
        - in: path
          name: uuid
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the tracking to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tracking'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tracking'
        '404':
          description: Not Found
    delete:
      summary: Delete tracking by UUID
      operationId: deleteTracking
      parameters:
        - in: path
          name: uuid
          schema:
            type: string
            format: uuid
          required: true
          description: UUID of the tracking to delete
      responses:
        '204':
          description: No Content


components:
  schemas:
    ApiError:
      type: object
      properties:
        httpStatus:
          type: integer
          format: int32
          description: The HTTP status code
        timestamp:
          type: string
          format: date-time
          description: The timestamp when the error occurred
        message:
          type: string
          description: A high-level, brief, and user-friendly error message
        subErrors:
          type: array
          items:
            $ref: '#/components/schemas/ApiSubError'
    ApiSubError:
      type: object
      properties:
        field:
          type: string
          description: The name of the field that the error is related to
        rejectedValue:
          type: string
          description: The value that was rejected during input validation
        message:
          type: string
          description: A detailed error message associated with the field
    BaseModel:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          readOnly: true
        version:
          type: integer
          format: int64
    Courier:
      x-class-extra-annotation: '@com.fasterxml.jackson.annotation.JsonIdentityInfo(
  generator = com.fasterxml.jackson.annotation.ObjectIdGenerators.PropertyGenerator.class,
  property = "uuid"
  )'
      allOf:
        - $ref: '#/components/schemas/BaseModel'
      type: object
      required:
        - firstName
        - lastName
      properties:
        id:
          type: integer
          format: int64
        courierCompany:
          $ref: '#/components/schemas/CourierCompany'
        firstName:
          type: string
          minLength: 3
          maxLength: 15
        lastName:
          type: string
          minLength: 3
          maxLength: 15
        deliveryList:
          #          x-field-extra-annotation: '@com.fasterxml.jackson.annotation.JsonIdentityReference(alwaysAsId = true)'
          type: array
          items:
            $ref: '#/components/schemas/Delivery'
    Customer:
      x-class-extra-annotation: '@com.fasterxml.jackson.annotation.JsonIdentityInfo(
       generator = com.fasterxml.jackson.annotation.ObjectIdGenerators.PropertyGenerator.class,
       property = "uuid"
       )'
      allOf:
        - $ref: '#/components/schemas/BaseModel'
      type: object
      required:
        - firstName
        - lastName
        - email
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
          minLength: 3
          maxLength: 15
        lastName:
          type: string
          minLength: 3
          maxLength: 15
        email:
          type: string
          minLength: 3
          maxLength: 25
          format: email
        orders:
          #          x-field-extra-annotation: '@com.fasterxml.jackson.annotation.JsonIdentityReference(alwaysAsId = true)'
          type: array
          items:
            $ref: '#/components/schemas/Order'
    Delivery:
      x-class-extra-annotation: '@com.fasterxml.jackson.annotation.JsonIdentityInfo(
       generator = com.fasterxml.jackson.annotation.ObjectIdGenerators.PropertyGenerator.class,
       property = "uuid"
       )'
      allOf:
        - $ref: '#/components/schemas/BaseModel'
      type: object
      required:
        - price
        - deliveryTime
      properties:
        id:
          type: integer
          format: int64
        deliveryStatus:
          $ref: '#/components/schemas/DeliveryStatus'
        price:
          type: number
          format: double
          minimum: 5
          maximum: 10000
        deliveryTime:
          type: string
          format: date-time
        courier:
          #          x-field-extra-annotation: '@com.fasterxml.jackson.annotation.JsonIdentityReference(alwaysAsId = true)'
          $ref: '#/components/schemas/Courier'
        order:
          $ref: '#/components/schemas/Order'
    Order:
      x-class-extra-annotation: '@com.fasterxml.jackson.annotation.JsonIdentityInfo(
       generator = com.fasterxml.jackson.annotation.ObjectIdGenerators.PropertyGenerator.class,
       property = "uuid"
       )'
      allOf:
        - $ref: '#/components/schemas/BaseModel'
      type: object
      required:
        - senderAddress
        - receiverAddress
        - packageSize
        - packageType
        - preferredDeliveryDate
      properties:
        id:
          type: integer
          format: int64
        senderAddress:
          type: string
          minLength: 6
          maxLength: 35
        receiverAddress:
          type: string
          minLength: 6
          maxLength: 35
        packageType:
          $ref: '#/components/schemas/PackageType'
        packageSize:
          $ref: '#/components/schemas/PackageSize'
        preferredDeliveryDate:
          type: string
          format: date
        customer:
          $ref: '#/components/schemas/Customer'
    Tracking:
      x-class-extra-annotation: '@com.fasterxml.jackson.annotation.JsonIdentityInfo(
       generator = com.fasterxml.jackson.annotation.ObjectIdGenerators.PropertyGenerator.class,
       property = "uuid"
       )'
      allOf:
        - $ref: '#/components/schemas/BaseModel'
      type: object
      required:
        - localization
      properties:
        id:
          type: integer
          format: int64
        localization:
          type: string
          minLength: 6
          maxLength: 35
    CourierCompany:
      type: string
      enum: [ DHL, DPD, GLS, UPS, FEDEX ]
    DeliveryStatus:
      type: string
      enum: [ CREATED, PICKED_UP, IN_TRANSIT, DELIVERED, FAILED_DELIVERY_ATTEMPT, RETURNED, LOST ]
    PackageSize:
      type: string
      enum: [ SMALL, MEDIUM, LARGE, EXTRA_LARGE ]
    PackageType:
      type: string
      enum: [ PARCEL, DOCUMENT ]

